(()=>{"use strict";var e=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{a(o.next(e))}catch(e){i(e)}}function l(e){try{a(o.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,l)}a((o=o.apply(e,t||[])).next())}))};let t;const n=document.getElementById("ripristinaCopie");function o(){return e(this,void 0,void 0,(function*(){try{const n=yield function(){return e(this,void 0,void 0,(function*(){return new Promise(((e,n)=>{const o=t.transaction("CopieEliminate","readonly").objectStore("CopieEliminate").getAll();o.onsuccess=()=>{e(o.result)},o.onerror=()=>{n(o.error)}}))}))}(),o=document.getElementById("corpoTabellaCopie");o.innerHTML="";for(let e=0;e<n.length;e++){let r=n[e];const i=yield new Promise(((e,n)=>{const o=t.transaction("Libri","readonly").objectStore("Libri").get(r.libroDellaCopiaISBN);o.onsuccess=()=>{o.result?e(o.result):n(new Error("Libro con ISBN non trovato"))},o.onerror=()=>{n(new Error("Database dei libri non reperibile"))}})),c=document.createElement("tr"),l=document.createElement("td"),a=document.createElement("input");a.setAttribute("type","checkbox"),a.setAttribute("class","caselleSelezione"),l.appendChild(a),c.appendChild(a);const s=document.createElement("td");s.textContent=String(r.codiceUnivoco),c.appendChild(s);const d=document.createElement("td");d.textContent=String(i.isbn),c.appendChild(d);const u=document.createElement("td");u.textContent=i.titolo,c.appendChild(u);const p=document.createElement("td");p.textContent=String(r.prezzoCopertina),c.appendChild(p);const m=document.createElement("td");m.textContent=String(r.prezzoCopertina),c.appendChild(m),o.appendChild(c)}}catch(e){e instanceof Error&&console.error(e.message)}}))}null==n||n.addEventListener("click",(function(){return e(this,void 0,void 0,(function*(){const n=document.querySelectorAll('input[type="checkbox"].caselleSelezione:checked');if(0!==n.length){if(window.confirm("Vuoi ripristinare le copie selezionate?"))try{const r=t.transaction(["Copie","CopieEliminate"],"readwrite"),i=r.objectStore("Copie"),c=r.objectStore("CopieEliminate"),l=Array.from(n).map((t=>e(this,void 0,void 0,(function*(){var e,n;const o=t.closest("tr");if(o){const t=null===(n=null===(e=o.cells[0])||void 0===e?void 0:e.textContent)||void 0===n?void 0:n.trim();if(t)return new Promise(((e,n)=>{const o=c.get(Number(t));o.onsuccess=()=>{const r=o.result;if(r){const o=i.add(r);o.onsuccess=()=>{c.delete(Number(t)),e()},o.onerror=()=>{n(new Error("Errore nel ripristino della copia."))}}else n(new Error(`Copia con ID ${t} non trovata nello store 'CopieEliminate'.`))},o.onerror=()=>{n(new Error("Errore nel recupero della copia eliminata."))}}))}}))));yield Promise.all(l),window.alert("Copie ripristinate correttamente."),yield o()}catch(e){console.error("Errore durante il ripristino:",e),alert("Errore durante il ripristino delle copie.")}}else window.alert("Seleziona almeno una copia da ripristinare")}))})),document.addEventListener("DOMContentLoaded",(()=>e(void 0,void 0,void 0,(function*(){try{t=yield function(){let e=new Promise(((e,t)=>{const n=indexedDB.open("Database",1);n.onerror=()=>{t(n.onerror)},n.onsuccess=()=>{const t=n.result;e(t)}}));return e}(),console.log("Database aperto:",t.name),yield o()}catch(e){console.error(e)}}))))})();